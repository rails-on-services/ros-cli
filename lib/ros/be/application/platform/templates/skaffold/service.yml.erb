---
apiVersion: <%= @service.skaffold_version %>
kind: Config
build:
  artifacts:
  - image: <%= @service.name %>
    context: <%= @service.context_path %>
    docker:
      dockerfile: <%= @service.dockerfile_path %>
      <%- if @service.image.build_args -%>
      buildArgs:
        <%- @service.image.build_args.each_pair do |name, value| -%>
        <%= name %>: <%= value.is_a?(Array) ? value.join(' ') : value %>
        <%- end -%>
        project: <%= @service.name %>
      <%- end -%>
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:{{.IMAGE_TAG}}"
  local:
    useDockerCLI: true
    push: true
profiles:
  <%- @service.profiles.each do |profile| -%>
  <%- xname = profile.eql?('server') ? '' : "_#{profile}" -%>
  - name: <%= profile %>
    patches:
    - op: remove
      path: /build
    deploy:
      helm:
        flags:
          install: ['--atomic']
          upgrade: ['--atomic']
        releases:
        - name: <%= @service.name.to_s.gsub('_', '-') %><%= xname.gsub('_', '-') %>
          chartPath: ros/service
          remote: true
          wait: true
          recreatePods: false
          setValueTemplates:
            replicaCount: <% if profile.eql?('scheduler') %>1<% else %>"{{.REPLICA_COUNT}}"<% end %>
            image.tag: "{{.IMAGE_TAG}}"
            image.repository: "{{.SKAFFOLD_DEFAULT_REPO}}/<%= @service.name %>"
            app.env.SENTRY_RELEASE: "{{.IMAGE_TAG}}"
          overrides:
            <%- unless profile.eql?('scheduler') %>
            podDisruptionBudget:
              minAvailable: 1
            <%- end %>
            labels:
              # app.kubernetes.io/name: <%= @service.name %>
              app.kubernetes.io/component: <%= profile %>
              app.kubernetes.io/part-of: application-platform
              # stack.name: <%= @service.stack_name %>
              # stack.component: be
              # be.component: application
              # application.component: platform
              # platform.feature_set: <%= @service.current_feature_set %>
              # service.type: <%= profile %>
            nameOverride: <%= @service.name.to_s.gsub('_', '-') %><%= xname.gsub('_', '-') %>
            image:
              pullPolicy: <%= @service.pull_policy %>
            imagePullSecrets:
              - name: <%= @service.pull_secret %>
            app:
              env:
                SENTRY_ENVIRONMENT: <%= @service.ros_env %><%= @service.ros_profile.empty? ? '' : '-' + @service.ros_profile %><%= @service.current_feature_set == 'master' ? '' : '-' + @service.current_feature_set %>
              <%- if profile.eql?('server') -%>
              command: ["bundle", "exec", "rails", "server", "-b", "0.0.0.0", "-P", "/tmp/server.pid"]
              <%- elsif profile.eql?('worker') and @service.is_ros_service -%>
              command: ["bundle", "exec", "sidekiq", "-r", "spec/dummy", "-C", "config/sidekiq.yml"]
              <%- elsif profile.eql?('worker') and not @service.is_ros_service -%>
              command: ["bundle", "exec", "sidekiq", "-C", "config/sidekiq.yml"]
              <%- elsif profile.eql?('sqs_worker') -%>
              command: ["bundle", "exec", "shoryuken", "-r", "./app/workers/aws", "-C", "config/shoryuken.yml"]
              <%- elsif profile.eql?('scheduler') -%>
              command: ["bundle", "exec", "rails", "runner", "./lib/scheduler.rb"]
              <%- end -%>
              envFromSecrets:
                <%- @service.secrets_files.each do |name| -%>
                - <%= name %>
                <%- end -%>
            <%- unless profile.eql?('scheduler') || @autoscaling.empty? -%>
            autoscaling:
              <%- @autoscaling.each_line do |line| -%>
              <%= line -%>
              <%- end -%>
            <%- end -%>
            <%- if profile.eql?('server') -%>
            bootstrap:
              enabled: true
              command: ["bundle", "exec", "rails", "<% if @service.is_ros_service %>app:<% end %>ros:db:reset", "<% if @service.is_ros_service %>app:ros:<%= @service.name %>:<% end %>db:seed"<% if services_components[:"kafka-schema-registry"]&.config&.enabled%>, "<% if @service.is_ros_service %>app:<% end %>ros:avro:register"<% end %>]
            hook:
              upgradeMigration:
                enabled: true
                command: ["bundle", "exec", "rails", "<% if @service.is_ros_service %>app:<% end %>db:migrate"<% if services_components[:"kafka-schema-registry"]&.config&.enabled%>, "<% if @service.is_ros_service %>app:<% end %>ros:avro:register"<% end %>]
            <%- else -%>
            service:
              enabled: false
            containerPort:
            httpProbePath:
            bootstrap:
              enabled: false
            hook:
              upgradeMigration:
                enabled: false
            <%- end -%>
            metrics:
              <%- if environment.platform&.metrics&.enabled -%>
              enabled: true
              <%- if profile.eql?('server') -%>
              command: ["bundle", "exec", "prometheus_exporter", "-a", "/home/rails/<% unless @service.is_ros_service %>ros/<% end %>lib/core/lib/ros/prometheus_exporter/web_collector.rb"]
              <%- end -%>
              <%- else -%>
              enabled: false
              <%- end -%>
            resources:
              limits:
                cpu: 1
                memory: 2.5Gi
              requests:
                cpu: 200m
                memory: 1Gi
            affinity:
              nodeAffinity:
                preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 1
                  preference:
                    matchExpressions:
                    - key: kubernetes.io/lifecycle
                      operator: In
                      values:
                      - spot
              podAntiAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                      - <%= @service.name.to_s.gsub('_', '-') %><%= xname.gsub('_', '-') %>
                  topologyKey: kubernetes.io/hostname
            tolerations:
            - key: spotInstance
              operator: Exists
              effect: NoSchedule
<%- end -%>
