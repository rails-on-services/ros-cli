# Providers
provider "aws" {
  region  = "<%= infra.components.kubernetes.config.region.nil? ? 'ap-southeast-1' : infra.components.kubernetes.config.region %>"
  profile = local.aws_profile
  version = ">= 2.38.0"
}

provider "aws" {
  region  = "us-east-1"
  profile = local.aws_profile
  alias   = "us-east-1"
  version = ">= 2.38.0"
}

provider "kubernetes" {
  version                = "~> 1.10"
  host                   = data.aws_eks_cluster.cluster.endpoint
  cluster_ca_certificate = base64decode(data.aws_eks_cluster.cluster.certificate_authority[0].data)
  token                  = data.aws_eks_cluster_auth.cluster-auth.token
  load_config_file       = true
}

# This is custom provider to manage Kubernetes CRDs that currently aren't supported by terraform
provider "kubectl" {
  host                   = data.aws_eks_cluster.cluster.endpoint
  cluster_ca_certificate = base64decode(data.aws_eks_cluster.cluster.certificate_authority[0].data)
  token                  = data.aws_eks_cluster_auth.cluster-auth.token
  load_config_file       = false
}

provider "helm" {
  version         = "~> 0.10"
  namespace       = "kube-system"
  install_tiller  = true
  tiller_image    = "gcr.io/kubernetes-helm/tiller:v2.15.2"
  service_account = "tiller"

  kubernetes {
    host                   = data.aws_eks_cluster.cluster.endpoint
    cluster_ca_certificate = base64decode(data.aws_eks_cluster.cluster.certificate_authority[0].data)
    token                  = data.aws_eks_cluster_auth.cluster-auth.token
    load_config_file       = true
  }
}

provider "http" {
  version = "~> 1.1"
}

provider "local" {
  version = "~> 1.3"
}

provider "null" {
  version = "~> 2.1"
}

provider "random" {
  version = "~> 2.2"
}

provider "template" {
  version = "~> 2.1"
}

provider "external" {
  version = "~> 1.2"
}

# Variables
variable "tags" {
  default = {}
}

variable "eks_worker_groups" {
  default = []
}

variable "eks_worker_groups_launch_template" {
  default = []
}

variable "fluentd_gcp_logging_service_account_json_key" {
  default = ""
}

variable "helm_configuration_overrides" {
  default = {}
}

# Locals
locals {
  aws_profile      = "<%= infra.config.cluster.aws_profile.nil? ? "default" : infra.config.cluster.aws_profile %>"
  vpc_cidr         = "<%= infra.components.vpc&.config&.cidr.nil? ? "10.0.0.0/16" : infra.components.vpc.config.cidr %>"
  cluster_name     = "<%= infra.components.kubernetes&.config&.name.nil? ? infra.config.cluster.name : infra.components.kubernetes.config.name %>"
  vpc_name         = "<%= infra.components.vpc&.config&.name.nil? ? infra.config.cluster.name : infra.components.vpc.config.name %>"
  accelerator_name = "<%= infra.components.globalaccelerator&.config&.name.nil? ? infra.config.cluster.name : infra.components.globalaccelerator.config.name %>"
  iam_name         = "<%= infra.components.iam&.config&.name.nil? ? infra.config.cluster.name : infra.components.iam.config.name %>"
  tags             = var.tags
  domain_name      = "<%= infra.dns.sub_domain %><%= infra.dns.sub_domain.nil? ? "" : "."%><%= infra.dns.root_domain %>"
  s3_buckets       = [
    <%- unless infra.components.object_storage&.components.nil? -%>
     <%- infra.components.object_storage.components.each do |bucket, config| -%>
    "<%= bucket %>-${replace(local.domain_name, ".", "-")}",
    <%- end -%>
    <%- end -%>
  ]
}

# VPC
data "aws_availability_zones" "available" {
  state = "available"
}

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "~> 2.18.0"

  name                   = local.vpc_name
  cidr                   = local.vpc_cidr
  enable_nat_gateway     = true
  enable_dns_hostnames   = true
  enable_dns_support     = true
  one_nat_gateway_per_az = true
  enable_s3_endpoint     = true

  create_redshift_subnet_group    = false
  create_database_subnet_group    = <%= infra.components.vpc&.config&.create_database_subnets ? true : false %>
  create_elasticache_subnet_group = <%= infra.components.vpc&.config&.create_elasticache_subnets ? true : false %>

  azs                 = slice(data.aws_availability_zones.available.names, 0, 3)
  public_subnets      = [for i in range(0, 3) : cidrsubnet(local.vpc_cidr, 4, i)]
  private_subnets     = [for i in range(3, 6) : cidrsubnet(local.vpc_cidr, 4, i)]
  database_subnets    = <%= infra.components.vpc&.config&.create_database_subnets ? "[for i in range(6, 9) : cidrsubnet(local.vpc_cidr, 4, i)]" : [] %>
  elasticache_subnets = <%= infra.components.vpc&.config&.create_elasticache_subnets ? "[for i in range(9, 12) : cidrsubnet(local.vpc_cidr, 4, i)]" : [] %>

  tags                = var.tags
  vpc_tags            = { "kubernetes.io/cluster/${local.cluster_name}" = "shared"
  }

  public_subnet_tags  = {
    "kubernetes.io/cluster/${local.cluster_name}" = "shared"
    "kubernetes.io/role/elb"                      = "1"
  }

  private_subnet_tags = {
    "kubernetes.io/cluster/${local.cluster_name}" = "shared"
    "kubernetes.io/role/internal-elb"             = "1"
  }
}

output "vpc" {
  value = module.vpc
}

# IAM
module "iam" {
  source = "rails-on-services/eks-iam/aws"
  name   = local.iam_name
}

output "iam" {
  value = module.iam.*
}

# EKS cluster
module "eks-cluster" {
  source                    = "rails-on-services/eks-cluster/aws"
  cluster_name              = local.cluster_name
  vpc_id                    = module.vpc.vpc_id
  public_subnets            = module.vpc.public_subnets
  private_subnets           = module.vpc.private_subnets
  default_security_group_id = module.vpc.default_security_group_id
  aws_profile               = local.aws_profile

  eks_worker_groups = var.eks_worker_groups
  eks_worker_groups_launch_template = var.eks_worker_groups_launch_template

  eks_map_users = [
    <%- infra.components.kubernetes.config.admins&.each do |user| -%>
    {
      userarn = "arn:aws:iam::<%= @provider_config.account_id %>:user/<%= user %>"
      username = "<%= user %>"
      groups    = ["system:masters"]
    },
    <%- end -%>
  ]

  eks_map_roles      = module.iam.eks_map_roles
  eks_extra_policies = concat(
    data.template_file.aws_iam_policy_document_s3[*].rendered,
    data.template_file.aws_iam_policy_document_cloudwatch[*].rendered
  )
  tags               = var.tags
}

output "eks" {
  value = module.eks-cluster.this
}

# Below two depends_on `module.eks-cluster`. Both may cause circular dependancy under certain circumstances
# Temporary comment both `depends_on` if weird cycle error raised during `apply`
data "aws_eks_cluster" "cluster" {
  # depends_on = [module.eks-cluster]
  name = local.cluster_name
}

data "aws_eks_cluster_auth" "cluster-auth" {
  # depends_on = [module.eks-cluster]
  name       = local.cluster_name
}

# Route 53
module "route53" {
  source                         = "rails-on-services/route53/aws"
  root_domain                    = "<%= infra.dns.root_domain %>"
  sub_domain                     = "<%= infra.dns.sub_domain %>"
  root_domain_managed_in_route53 = <%= infra.dns.root_domain_managed_in_route53 ? true : false %>
}

output "route53" {
  value = module.route53.*
}

<%- if infra.components.ses&.config&.enabled -%>
# AWS SES
module "ses" {
  source          = "rails-on-services/ses/aws"
  domain_name     = local.domain_name
  route53_zone_id = module.route53.this.zone_id
  aws_profile     = local.aws_profile
}
<%- end -%>

# Certificate Manager
module "acm" {
  source                    = "rails-on-services/acm/aws"
  domain_name               = local.domain_name
  route53_domain_name       = substr(module.route53.this.name, 0, length(module.route53.this.name)-1)
  route53_dns_record_count  = 1
  subject_alternative_names = [
    "*.${local.domain_name}"
    <%- infra.components.cert.config.subject_alternative_names&.each do |v| -%>
    , "<%= v %>"
    <% end -%>
  ]
  validate_certificate      = <%= infra.dns.root_domain_managed_in_route53 ? true : false %>
}

output "acm" {
  value = module.acm.*
}

# EKS Resources
module "eks-resources" {
  source                     = "rails-on-services/eks-resources/k8s"
  aws_profile                = local.aws_profile
  cluster_name               = local.cluster_name
  clusterrolebindings        = module.iam.kubernetes_clusterrolebindings
  enable_external_dns        = <%= infra.components.kubernetes.components.services.components.external_dns&.config&.enabled.nil? ? false : infra.components.kubernetes.components.services.components.external_dns.config.enabled %>
  external_dns_domainFilters = [module.acm.this.domain_name]
  external_dns_zoneIdFilters = [module.route53.this.zone_id]
  istio_version              = "<%= infra.components.kubernetes.components.services.components.istio&.config&.version.nil? ? '1.3.5' : infra.components.kubernetes.components.services.components.istio.config.version %>"
  extra_namespaces           = [
    <%- infra.components.kubernetes.components.infra.config.extra_namespaces&.each do |v| -%>
    "<%= v %>",
    <%- end -%>
   ]

  istio_ingressgateway_alb_cert_arn = module.acm.this.arn
  kubeconfig                        = module.eks-cluster.this.kubeconfig
  vpc_id                            = module.vpc.vpc_id
  # tags                              = var.tags

  enable_fluentd_gcp_logging                   = <%= infra.components.kubernetes.components.services.components.cluster_logging.config.provider == 'gcp' ? true : false %>
  fluentd_gcp_logging_service_account_json_key = var.fluentd_gcp_logging_service_account_json_key
  helm_configuration_overrides                 = var.helm_configuration_overrides
}

output "istio_ingressgateway_alb_arn" {
  value = module.eks-resources.istio_ingressgateway_alb_arn
}

# Cluster monitoring
module "monitor" {
  source                       = "rails-on-services/monitor/k8s"
  namespace                    = "<%= infra.components.kubernetes.components.services.components.grafana.config.namespace %>"
  grafana_host                 = "<%= infra.components.dns.config.endpoints&.grafana.nil? ? "grafana" : infra.components.dns.config.endpoints.grafana %>"
  grafana_endpoint             = "<%= infra.components.dns.config.endpoints&.grafana.nil? ? "grafana" : infra.components.dns.config.endpoints.grafana %>.${local.domain_name}"
  grafana_user                 = "<%= infra.components.kubernetes.components.services.components.grafana&.config&.username.nil? ? "" : infra.components.kubernetes.components.services.components.grafana.config.username %>"
  grafana_password             = "<%= infra.components.kubernetes.components.services.components.grafana&.config&.password.nil? ? "" : infra.components.kubernetes.components.services.components.grafana.config.password %>"
  helm_configuration_overrides = var.helm_configuration_overrides
  monitor_depends_on           = module.eks-resources
}

# Cert-manager
module "cert-manager" {
  source        = "rails-on-services/cert-manager/k8s"
  namespace     = "<%= infra.components.kubernetes.components.services.components.cert_manager&.config&.namespace %>"
  cm_depends_on = module.eks-resources
}

<%- if infra.components.globalaccelerator&.config&.enabled -%>
# Global accelerator
module "globalaccelerator" {
  source                      = "rails-on-services/globalaccelerator/aws"
  name                        = local.accelerator_name
  route53_zone_id             = module.route53.this.zone_id
  add_route53_record          = <%= infra.components.globalaccelerator&.config&.hostname.nil? ? false : true %>
  route53_record_name         = "<%= infra.components.globalaccelerator&.config&.hostname %>"
  add_elb_listener            = true
  elb_endpoint                = module.eks-resources.istio_ingressgateway_alb_arn
}

output "globalaccelerator_ips" {
  value = module.globalaccelerator.globalaccelerator_ips
}
<% end -%>

<%- if infra.components.cdn&.components&.cdn&.enabled -%>
# Cloudfront S3
module "cloudfront-s3" {
  source                 = "rails-on-services/cloudfront-s3/aws"
  aws_profile            = local.aws_profile
  s3_bucket_name         = "${replace(replace("<%= infra.components.cdn.components.cdn.url %>", "https://", ""), ".", "-")}"
  cloudfront_cname       = "${replace("<%= infra.components.cdn.components.cdn.url %>", "https://", "")}"
  create_acm_certificate = true
  add_route53_record     = true
  route53_zone_id        = module.route53.this.zone_id
  tags                   = var.tags
}
<% end -%>

<%- unless infra.components.object_storage&.components.nil? -%>
# S3
module "s3" {
  source          = "rails-on-services/s3/aws"
  s3_bucket_names = [
    <%- infra.components.object_storage.components.each do |bucket, config| -%>
      <%- unless bucket.to_s == "cdn" -%>
      "<%= bucket %>-${replace(local.domain_name, ".", "-")}",
      <%- end -%>
    <%- end -%>
  ]
  tags            = var.tags
}

output "s3" {
  value = module.s3.this
}
<%- end -%>

<%- if infra.components&.databases&.config&.enabled -%>
<%- infra.components.databases.config.clusters&.each do |key, config| -%>
# RDS Aurora
module "rds-<%= key %>" {
  source  = "terraform-aws-modules/rds-aurora/aws"
  name    = "<%= config.name %>"
  version = "~> 2.9.0"

  engine                          = "aurora-postgresql"
  engine_version                  = "10.7"
  instance_type                   = "<%= infra.components.databases.config.clusters.default.instance_type %>"
  performance_insights_enabled    = true
  vpc_id                          = module.vpc.vpc_id
  subnets                         = module.vpc.database_subnets
  db_subnet_group_name            = ""
  username                        = "postgres"
  password                        = "<%= infra.components.databases.config.clusters[key].password %>"
  replica_count                   = 1
  storage_encrypted               = "true"
  apply_immediately               = "true"
  monitoring_interval             = 10
  db_cluster_parameter_group_name = "default.aurora-postgresql10"
  db_parameter_group_name         = "default.aurora-postgresql10"
  allowed_security_groups         = [module.vpc.default_security_group_id]
  tags                            = var.tags
}

output "rds-<%= key %>" {
  value = module.rds-<%= key %>
}
<% end -%>
<% end -%>

<%- if infra.components&.redis&.config&.enabled -%>
<%- infra.components.redis.config.clusters&.each do |key, config| -%>
# Elasticache Redis
module "elasticache-redis-<%= key %>" {
  source        = "rails-on-services/elasticache-redis/aws"
  name          = "<%= config.name %>"
  vpc_id        = module.vpc.vpc_id
  tags          = var.tags
  <%- if config.node_type  -%>
  node_type     = "<%= config.node_type %>"
  <%- end -%>

  <%- if config.number_cache_clusters %>
  number_cache_clusters         = "<%= config.number_cache_clusters %>"
  <%- end -%>
  elasticache_subnet_group_name = module.vpc.elasticache_subnet_group_name
  allowed_security_groups       = [module.vpc.default_security_group_id]
  allowed_security_groups_count = 1
}

output "elasticache-redis-<%= key %>" {
  value=module.elasticache-redis-<%= key %>.this
}
<% end -%>
<% end -%>

# EKS extra policy templates

# S3 Buckets access
data "aws_iam_policy_document" "s3_buckets" {
  statement {
    actions   = ["s3:GetObject", "s3:PutObject"]
    resources = ["arn:aws:s3:::$${bucket_name}$${origin_path}*"]
  }

  statement {
    actions   = ["s3:ListBucket"]
    resources = ["arn:aws:s3:::$${bucket_name}"]
  }
}

data "template_file" "aws_iam_policy_document_s3" {
  count    = length(local.s3_buckets)
  template = data.aws_iam_policy_document.s3_buckets.json

  vars = {
    bucket_name = local.s3_buckets[count.index]
    origin_path = "/"
  }
}

# Cloudwatch access
data "template_file" "aws_iam_policy_document_cloudwatch" {
  template = data.aws_iam_policy_document.cloudwatch.json
}

data "aws_iam_policy_document" "cloudwatch" {
  statement {
    sid = "AllowReadingMetricsFromCloudWatch"

    actions = [
      "cloudwatch:DescribeAlarmsForMetric",
      "cloudwatch:ListMetrics",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:GetMetricData"
    ]

    resources = ["*"]
  }

  statement {
    sid = "AllowReadingTagsInstancesRegionsFromEC2"

    actions = [
      "ec2:DescribeTags",
      "ec2:DescribeInstances",
      "ec2:DescribeRegions"
    ]

    resources = ["*"]
  }

  statement {
    sid = "AllowReadingResourcesForTags"

    actions   = ["tag:GetResources"]
    resources = ["*"]
  }
}

