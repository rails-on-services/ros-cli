# Providers
provider "aws" {
  region  = "<%= infra.components.kubernetes.config.region.nil? ? 'ap-southeast-1' : infra.components.kubernetes.config.region %>"
  profile = local.aws_profile
}

provider "kubernetes" {
  version                = "~> 1.9"
  host                   = module.eks-cluster.cluster_endpoint #data.aws_eks_cluster.cluster.endpoint
  cluster_ca_certificate = base64decode(module.eks-cluster.cluster_certificate_authority_data)
  token                  = data.aws_eks_cluster_auth.cluster-auth.token
  load_config_file       = false
}

provider "helm" {
  version         = "~> 0.10"
  namespace       = "kube-system"
  install_tiller  = true
  tiller_image    = "gcr.io/kubernetes-helm/tiller:v2.14.3"
  service_account = "tiller"

  kubernetes {
    host                   = module.eks-cluster.cluster_endpoint #data.aws_eks_cluster.cluster.endpoint
    cluster_ca_certificate = base64decode(module.eks-cluster.cluster_certificate_authority_data)
    token                  = data.aws_eks_cluster_auth.cluster-auth.token
  }
}

provider "local" {
  version = "~> 1.3"
}

provider "null" {
  version = "~> 2.1"
}

provider "random" {
  version = "~> 2.2"
}

provider "template" {
  version = "~> 2.1"
}

variable "tags" {
  default = {}
}

variable "eks_worker_groups" {
  default = []
}

# Locals
locals {
  aws_profile                         = "<%= infra.config.cluster.aws_profile.nil? ? "default" : infra.config.cluster.aws_profile %>"
  vpc_cidr                            = "<%= infra.components.vpc&.config&.cidr.nil? ? "10.0.0.0/16" : infra.components.vpc.config.cidr %>"
  cluster_name                        = "<%= infra.components.kubernetes&.config&.name.nil? ? infra.config.cluster.name : infra.components.kubernetes.config.name %>"
  vpc_name                            = "<%= infra.components.vpc&.config&.name.nil? ? infra.config.cluster.name : infra.components.vpc.config.name %>"
  accelerator_name                    = "<%= infra.components.globalaccelerator&.config&.name.nil? ? infra.config.cluster.name : infra.components.globalaccelerator.config.name %>"
  iam_name                            = "<%= infra.components.iam&.config&.name.nil? ? infra.config.cluster.name : infra.components.iam.config.name %>"
  tags                                = var.tags
  domain_name                         = "<%= infra.dns.sub_domain %><%= infra.dns.sub_domain.nil? ? "" : "."%><%= infra.dns.root_domain %>"
}

# VPC
data "aws_availability_zones" "available" {}

# TODO refactor module aws/vpc so that it can be used by both of k8s tf and instance tf
module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "~> 2.9.0"

  name = local.vpc_name 
  cidr = local.vpc_cidr

  enable_nat_gateway              = true
  enable_dns_hostnames            = true
  enable_dns_support              = true
  enable_s3_endpoint              = true
  create_redshift_subnet_group    = false

  azs                 = slice(data.aws_availability_zones.available.names, 0, 3)
  public_subnets      = [for i in range(1, 4) : cidrsubnet(local.vpc_cidr, 8, i)] 
  private_subnets     = [for i in range(11, 14) : cidrsubnet(local.vpc_cidr, 8, i)]
  <%- if infra.components.vpc&.config&.create_database_subnets %>
  database_subnets    = [for i in range(4, 7) : cidrsubnet(local.vpc_cidr, 8, i)]
  create_database_subnet_group    = true
  <%- end -%>
  <%- if infra.components.vpc&.config&.create_elasticache_subnets %>
  elasticache_subnets = [for i in range(7, 10) : cidrsubnet(local.vpc_cidr, 8, i)]
  create_elasticache_subnet_group = true
  <%- end -%>

  tags = var.tags

  vpc_tags = {
    "kubernetes.io/cluster/${local.cluster_name}" = "shared"
  }

  public_subnet_tags = {
    "kubernetes.io/cluster/${local.cluster_name}" = "shared"
    "kubernetes.io/role/elb"                          = "1"
  }

  private_subnet_tags = {
    "kubernetes.io/cluster/${local.cluster_name}" = "shared"
    "kubernetes.io/role/internal-elb"                 = "1"
  }
}

output "vpc" {
  value     = module.vpc.*
  sensitive = true
}

# IAM
module "iam" {
  source = "./aws/eks-iam"
  name   = local.iam_name
}

output "iam" {
  value     = module.iam.*
  sensitive = true
}

# EKS cluster
module "eks-cluster" {
  source                    = "./aws/eks-cluster"
  cluster_name              = local.cluster_name
  vpc_id                    = module.vpc.vpc_id
  public_subnets            = module.vpc.public_subnets
  private_subnets           = module.vpc.private_subnets
  default_security_group_id = module.vpc.default_security_group_id
  aws_profile               = local.aws_profile

  eks_worker_groups = var.eks_worker_groups

  eks_map_users = []
  eks_map_roles = module.iam.eks_map_roles
  
  tags = var.tags
}

output "eks_cluster_endpoint" {
  value = module.eks-cluster.cluster_endpoint
}

output "eks_cluster_certificate_authority_data" {
  value = module.eks-cluster.cluster_certificate_authority_data
}

output "eks" {
  value = module.eks-cluster.this
}

module "route53" {
  source                         = "./aws/route53"
  root_domain                    = "<%= infra.dns.root_domain %>"
  sub_domain                     = "<%= infra.dns.sub_domain %>"
  root_domain_managed_in_route53 = <%= infra.dns.root_domain_managed_in_route53 ? true : false %>
}

output "route53" {
  value = module.route53.*
}

module "acm" {
  source                    = "./aws/acm"
  domain_name               = local.domain_name
  route53_domain_name       = substr(module.route53.this.name, 0, length(module.route53.this.name)-1)
  route53_dns_record_count  = 1
  subject_alternative_names = [
    "*.${local.domain_name}"
    <%- infra.components.cert.config.subject_alternative_names&.each do |v| -%>
    , "<%= v %>"
    <% end -%>
  ]
  validate_certificate      = <%= infra.dns.root_domain_managed_in_route53 ? true : false %>
}

output "acm" {
  value = module.acm.*
}

data "aws_eks_cluster_auth" "cluster-auth" {
  name = local.cluster_name
}

module "eks-resources" {
  source                     = "./aws/eks-resources"
  aws_profile                = local.aws_profile
  cluster_name               = local.cluster_name
  extra_namespaces           = []
  clusterrolebindings        = module.iam.kubernetes_clusterrolebindings
  enable_external_dns        = <%= infra.components.kubernetes.config.cluster_resources.enable_external_dns.nil? ? false : infra.components.kubernetes.config.cluster_resources.enable_external_dns %>
  external_dns_domainFilters = [module.acm.this.domain_name]
  external_dns_zoneIdFilters = [module.route53.this.zone_id]
  istio_version              = "<%= infra.components.kubernetes.config.cluster_resources.istio_version %>"

  istio_ingressgateway_alb_cert_arn = module.acm.this.arn
  enable_fluentd_gcp_logging        = true
  kubeconfig                        = module.eks-cluster.kubeconfig
  vpc_id                            = module.vpc.vpc_id
}

output "istio_ingressgateway_alb_arn" {
  value = module.eks-resources.istio_ingressgateway_alb_arn
}

<%- if infra.components.globalaccelerator&.config&.enabled -%>
# Global accelerator
module "globalaccelerator" {
  source                      = "./aws/globalaccelerator"
  name                        = local.accelerator_name
  route53_zone_id             = module.route53.this.zone_id
  add_route53_record          = <%= infra.components.globalaccelerator&.config&.hostname.nil? ? false : true %>    
  route53_record_name         = "<%= infra.components.globalaccelerator&.config&.hostname %>"
  add_elb_listener            = true
  elb_endpoint                = module.eks-resources.istio_ingressgateway_alb_arn
}

output "globalaccelerator_ips" {
  value = module.globalaccelerator.globalaccelerator_ips
}
<% end -%>

<%- if infra.components&.databases&.config&.enabled -%>
<%- infra.components.databases.config.clusters&.each do |key, config| -%>
module "rds-<%= key %>" {
  source        = "./aws/rds"
  name          = "<%= config.name %>"
  instance_type = "<%= config.instance_type %>"
  replica_count = "<%= config.replica_count %>"
  username      = "<%= config.username %>"
  password      = "<%= config.password %>"
  vpc_id        = module.vpc.vpc_id
  tags          = var.tags

  db_subnet_group_name          = module.vpc.database_subnet_group
  allowed_security_groups       = [module.vpc.default_security_group_id]
  allowed_security_groups_count = 1
}
<% end -%>
<% end -%>

<%- if infra.components&.redis&.config&.enabled -%>
<%- infra.components.redis.config.clusters&.each do |key, config| -%>
module "elasticache-redis-<%= key %>" {
  source        = "./aws/elasticache-redis"
  name          = "<%= config.name %>"
  vpc_id        = module.vpc.vpc_id
  tags          = var.tags
  <%- if config.node_type  -%>
  node_type     = "<%= config.node_type %>"
  <%- end -%>

  <%- if config.number_cache_clusters %>
  number_cache_clusters         = "<%= config.number_cache_clusters %>"
  <%- end -%>
  elasticache_subnet_group_name = module.vpc.elasticache_subnet_group_name
  allowed_security_groups       = [module.vpc.default_security_group_id]
  allowed_security_groups_count = 1
}
<% end -%>
<% end -%>
