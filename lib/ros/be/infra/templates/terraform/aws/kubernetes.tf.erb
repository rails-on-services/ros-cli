# Providers
provider "aws" {
  region  = "<%= infra.components.kubernetes.config.region.nil? ? 'ap-southeast-1' : infra.components.kubernetes.config.region %>"
  profile = local.aws_profile
  version = "~> 2.27"
}

provider "local" {
  version = "~> 1.3"
}

provider "null" {
  version = "~> 2.1"
}

provider "random" {
  version = "~> 2.2"
}

provider "template" {
  version = "~> 2.1"
}

variable "tags" {
  default = {}
}

variable "eks_worker_groups" {
  default = []
}

variable "fluentd_gcp_logging_service_account_json_key" {
  default = ""
}

variable "helm_configuration_overrides" {
  default = {}
}

# Locals
locals {
  aws_profile      = "<%= infra.config.cluster.aws_profile.nil? ? "default" : infra.config.cluster.aws_profile %>"
  vpc_cidr         = "<%= infra.components.vpc&.config&.cidr.nil? ? "10.0.0.0/16" : infra.components.vpc.config.cidr %>"
  cluster_name     = "<%= infra.components.kubernetes&.config&.name.nil? ? infra.config.cluster.name : infra.components.kubernetes.config.name %>"
  vpc_name         = "<%= infra.components.vpc&.config&.name.nil? ? infra.config.cluster.name : infra.components.vpc.config.name %>"
  accelerator_name = "<%= infra.components.globalaccelerator&.config&.name.nil? ? infra.config.cluster.name : infra.components.globalaccelerator.config.name %>"
  iam_name         = "<%= infra.components.iam&.config&.name.nil? ? infra.config.cluster.name : infra.components.iam.config.name %>"
  tags             = var.tags
  domain_name      = "<%= infra.dns.sub_domain %><%= infra.dns.sub_domain.nil? ? "" : "."%><%= infra.dns.root_domain %>"
  s3_buckets       = [
    <%- unless infra.components.object_storage&.components.nil? -%>
     <%- infra.components.object_storage.components.each do |bucket, config| -%>
    "<%= bucket %>-${replace(local.domain_name, ".", "-")}",
    <%- end -%>
    <%- end -%>
  ]
}

# VPC
module "vpc" {
  source = "./aws/vpc"

  name  = local.vpc_name
  cidr = local.vpc_cidr
  tags = var.tags

  <%- if infra.components.vpc&.config&.create_database_subnets -%>
  create_database_subnets = true
  <%- end -%>
  <%- if infra.components.vpc&.config&.create_elasticache_subnets -%>
  create_elasticache_subnets = true
  <%- end -%>

  vpc_tags =  {
    "kubernetes.io/cluster/${local.cluster_name}" = "shared"
  }

  public_subnet_tags = {
    "kubernetes.io/cluster/${local.cluster_name}" = "shared"
    "kubernetes.io/role/elb"                      = "1"
  }

  private_subnet_tags = {
    "kubernetes.io/cluster/${local.cluster_name}" = "shared"
    "kubernetes.io/role/internal-elb"             = "1"
  }
}

output "vpc" {
  value = module.vpc.this
}

# IAM
module "iam" {
  source = "./aws/eks-iam"
  name   = local.iam_name
}

output "iam" {
  value = module.iam.*
}

# EKS cluster
module "eks-cluster" {
  source                    = "./aws/eks-cluster"
  cluster_name              = local.cluster_name
  vpc_id                    = module.vpc.this.vpc_id
  public_subnets            = module.vpc.this.public_subnets
  private_subnets           = module.vpc.this.private_subnets
  default_security_group_id = module.vpc.this.default_security_group_id
  aws_profile               = local.aws_profile

  eks_worker_groups = var.eks_worker_groups

  eks_map_users = [
    <%- infra.components.kubernetes.config.admins&.each do |user| -%>
    {
      user_arn = "arn:aws:iam::<%= @provider_config.account_id %>:user/<%= user %>"
      username = "<%= user %>"
      group    = "system:masters"
    },
    <%- end -%>
  ]

  eks_map_roles      = module.iam.eks_map_roles
  eks_extra_policies = data.template_file.aws_iam_policy_document_s3[*].rendered
  tags               = var.tags
}

output "eks" {
  value = module.eks-cluster.this
}

data "aws_eks_cluster" "cluster" {
  name = local.cluster_name
}

data "aws_eks_cluster_auth" "cluster-auth" {
  depends_on = [module.eks-cluster]
  name       = local.cluster_name
}

provider "kubernetes" {
  version                = "~> 1.9"
  host                   = data.aws_eks_cluster.cluster.endpoint
  cluster_ca_certificate = base64decode(data.aws_eks_cluster.cluster.certificate_authority[0].data)
  token                  = data.aws_eks_cluster_auth.cluster-auth.token
  load_config_file       = true
}

provider "helm" {
  version         = "~> 0.10"
  namespace       = "kube-system"
  install_tiller  = true
  tiller_image    = "gcr.io/kubernetes-helm/tiller:v2.14.3"
  service_account = "tiller"

  kubernetes {
    host                   = data.aws_eks_cluster.cluster.endpoint
    cluster_ca_certificate = base64decode(data.aws_eks_cluster.cluster.certificate_authority[0].data)
    token                  = data.aws_eks_cluster_auth.cluster-auth.token
    load_config_file       = true
  }
}

module "route53" {
  source                         = "./aws/route53"
  root_domain                    = "<%= infra.dns.root_domain %>"
  sub_domain                     = "<%= infra.dns.sub_domain %>"
  root_domain_managed_in_route53 = <%= infra.dns.root_domain_managed_in_route53 ? true : false %>
}

output "route53" {
  value = module.route53.*
}

module "acm" {
  source                    = "./aws/acm"
  domain_name               = local.domain_name
  route53_domain_name       = substr(module.route53.this.name, 0, length(module.route53.this.name)-1)
  route53_dns_record_count  = 1
  subject_alternative_names = [
    "*.${local.domain_name}"
    <%- infra.components.cert.config.subject_alternative_names&.each do |v| -%>
    , "<%= v %>"
    <% end -%>
  ]
  validate_certificate      = <%= infra.dns.root_domain_managed_in_route53 ? true : false %>
}

output "acm" {
  value = module.acm.*
}

module "eks-resources" {
  source                     = "./aws/eks-resources"
  aws_profile                = local.aws_profile
  cluster_name               = local.cluster_name
  clusterrolebindings        = module.iam.kubernetes_clusterrolebindings
  enable_external_dns        = <%= infra.components.kubernetes.components.services.components.external_dns&.config&.enabled.nil? ? false : infra.components.kubernetes.components.services.components.external_dns.config.enabled %>
  external_dns_domainFilters = [module.acm.this.domain_name]
  external_dns_zoneIdFilters = [module.route53.this.zone_id]
  istio_version              = "<%= infra.components.kubernetes.components.services.components.istio&.config&.version.nil? ? '1.2.5' : infra.components.kubernetes.components.services.components.istio.config.version %>"
  extra_namespaces           = [
    <%- infra.components.kubernetes.components.infra.config.extra_namespaces&.each do |v| -%>
    "<%= v %>" ,
    <%- end -%>
    "<%= infra.components.kubernetes.components.services.components.grafana.config.namespace %>"
   ]
  istio_ingressgateway_alb_cert_arn = module.acm.this.arn
  kubeconfig                        = module.eks-cluster.this.kubeconfig
  vpc_id                            = module.vpc.this.vpc_id

  enable_fluentd_gcp_logging                   = <%= infra.components.kubernetes.components.services.components.cluster_logging.config.provider == 'gcp' ? true : false %>
  fluentd_gcp_logging_service_account_json_key = var.fluentd_gcp_logging_service_account_json_key
  grafana_namespace                            = "<%= infra.components.kubernetes.components.services.components.grafana.config.namespace %>"
  grafana_host                                 = "<%= infra.components.dns.config.endpoints&.grafana.nil? ? "grafana" : infra.components.dns.config.endpoints.grafana %>"
  grafana_endpoint                             = "<%= infra.components.dns.config.endpoints&.grafana.nil? ? "grafana" : infra.components.dns.config.endpoints.grafana %>.${local.domain_name}"
  grafana_user                                 = "<%= infra.components.kubernetes.components.services.components.grafana&.config&.username.nil? ? "" : infra.components.kubernetes.components.services.components.grafana.config.username %>"
  grafana_password                             = "<%= infra.components.kubernetes.components.services.components.grafana&.config&.password.nil? ? "" : infra.components.kubernetes.components.services.components.grafana.config.password %>"
  helm_configuration_overrides                 = var.helm_configuration_overrides
}

output "istio_ingressgateway_alb_arn" {
  value = module.eks-resources.istio_ingressgateway_alb_arn
}

<%- if infra.components.globalaccelerator&.config&.enabled -%>
# Global accelerator
module "globalaccelerator" {
  source                      = "./aws/globalaccelerator"
  name                        = local.accelerator_name
  route53_zone_id             = module.route53.this.zone_id
  add_route53_record          = <%= infra.components.globalaccelerator&.config&.hostname.nil? ? false : true %>
  route53_record_name         = "<%= infra.components.globalaccelerator&.config&.hostname %>"
  add_elb_listener            = true
  elb_endpoint                = module.eks-resources.istio_ingressgateway_alb_arn
}

output "globalaccelerator_ips" {
  value = module.globalaccelerator.globalaccelerator_ips
}
<% end -%>

<%- if infra.components.cdn&.components&.cdn&.enabled -%>
module "cloudfront-s3" {
  source                 = "./aws/cloudfront-s3"
  aws_profile            = local.aws_profile
  s3_bucket_name         = "${replace(replace("<%= infra.components.cdn.components.cdn.url %>", "https://", ""), ".", "-")}"
  cloudfront_cname       = "${replace("<%= infra.components.cdn.components.cdn.url %>", "https://", "")}"
  create_acm_certificate = true
  add_route53_record     = true
  route53_zone_id        = module.route53.this.zone_id
  tags                   = var.tags
}
<% end -%>

<%- unless infra.components.object_storage&.components.nil? -%>
module "s3" {
  source          = "./aws/s3"
  s3_bucket_names = [
    <%- infra.components.object_storage.components.each do |bucket, config| -%>
    <%- unless bucket.to_s == "cdn" -%>
    "<%= bucket %>-${replace(local.domain_name, ".", "-")}",
    <%- end -%>
    <%- end -%>
  ]
  tags            = var.tags
}

output "s3" {
  value = module.s3.this
}
<%- end -%>

<%- if infra.components&.databases&.config&.enabled -%>
<%- infra.components.databases.config.clusters&.each do |key, config| -%>
# RDS
module "rds-<%= key %>" {
  source        = "./aws/rds"
  name          = "<%= config.name %>"
  instance_type = "<%= config.instance_type %>"
  replica_count = "<%= config.replica_count %>"
  username      = "<%= config.username %>"
  password      = "<%= config.password %>"
  vpc_id        = module.vpc.this.vpc_id
  tags          = var.tags
  subnets       = module.vpc.this.database_subnets

  allowed_security_groups       = [module.vpc.this.default_security_group_id]
  allowed_security_groups_count = 1
}
<% end -%>
<% end -%>

<%- if infra.components&.redis&.config&.enabled -%>
<%- infra.components.redis.config.clusters&.each do |key, config| -%>
# Elasticache
module "elasticache-redis-<%= key %>" {
  source        = "./aws/elasticache-redis"
  name          = "<%= config.name %>"
  vpc_id        = module.vpc.this.vpc_id
  tags          = var.tags
  <%- if config.node_type  -%>
  node_type     = "<%= config.node_type %>"
  <%- end -%>

  <%- if config.number_cache_clusters %>
  number_cache_clusters         = "<%= config.number_cache_clusters %>"
  <%- end -%>
  elasticache_subnet_group_name = module.vpc.this.elasticache_subnet_group_name
  allowed_security_groups       = [module.vpc.this.default_security_group_id]
  allowed_security_groups_count = 1
}
<% end -%>
<% end -%>

# EKS extra policy templates
data "aws_iam_policy_document" "s3_buckets" {
  statement {
    actions   = ["s3:GetObject", "s3:PutObject"]
    resources = ["arn:aws:s3:::$${bucket_name}$${origin_path}*"]
  }

  statement {
    actions   = ["s3:ListBucket"]
    resources = ["arn:aws:s3:::$${bucket_name}"]
  }
}

data "template_file" "aws_iam_policy_document_s3" {
  count    = length(local.s3_buckets)
  template = data.aws_iam_policy_document.s3_buckets.json

  vars = {
    bucket_name = local.s3_buckets[count.index]
    origin_path = "/"
  }
}

