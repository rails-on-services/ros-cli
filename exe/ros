#!/usr/bin/env ruby

if ARGV[0]&.eql? '-T'
  res = %x(rake -T #{ARGV[1]})
  STDOUT.puts res.gsub(/^rake/, 'ros').gsub("\nrake", "\nros")
elsif ARGV[0]&.include? ':'
  require 'rake'
  tasks = ARGV.each_with_object([]) { |arg, tasks| tasks.append(arg) if arg.index(':') }
  args = ARGV.each_with_object([]) { |arg, args| args.append(arg) unless arg.index(':') }
  Rake.load_rakefile('Rakefile') if File.exist?('Rakefile')
  tasks.each { |task| Rake::Task[task].invoke(args) }
else
  require 'bundler/setup'
  require 'ros'
  cmd = ARGV[0]
  if %w(be fe data).include?(cmd)
    ARGV.shift
    sub_cmd = ARGV[0]
    if cmd.eql?('be') and %w(infra).include?(sub_cmd)
      ARGV.shift
      require "ros/#{cmd}/#{sub_cmd}/cli"
      Ros.const_get("#{cmd.capitalize}::#{sub_cmd.capitalize}::Cli").start
    elsif cmd.eql?('data')
      if %w(metabase).include?(sub_cmd)
        ARGV.shift
        require "ros/#{cmd}/#{sub_cmd}/cli"
        Ros.const_get("#{cmd.capitalize}::#{sub_cmd.capitalize}::Cli").start
      else
        puts "Not implemented"
        puts "Use ros data metabase"
        exit
      end
    else
      require "ros/#{cmd}/application/cli"
      Ros.const_get("#{cmd.capitalize}::Application::Cli").start
    end
  else
    require 'ros/cli'
    Ros::Cli.start
  end
end
